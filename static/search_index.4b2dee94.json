[{"id":0,"title":"Custom Integration","content":"#\n\nThis guide explains how to add Filenest endpoints to your existing JS/TS API, if\nthere is no fitting adapter for your framework.\n\n\nSetup#\n\nAt its core, an adapter is a wrapper around a provider and returns the providers\nclass methods in a specific way to conform to a specific implementation. To\nintegrate Filenest into your existing API, you need to manually create multiple\nendpoints, each calling a function from the provider.\n\nTake a look at this pseudo code and imagine this was a real REST API.\n\nYou first instanciate a provider:\n\n\n\nNext, create a request handler / endpoint for each public method of the\nprovider.\n\nYou can find a list of all required endpoints below.\n\nCareful\n\nFilenest currently only works with POST requests.\n\nMake sure to only accept POST requests in your custom Filenest API endpoints.\n\n\n\n\nFrontend configuration#\n\nIn the above example, the main API endpoint is /filenest.\n\nMake sure to pass this endpoint to the Filenest.Root component in your frontend.\nIf your API runs on a different host or port, you can also pass the full URL,\ne.g. https://api.example.com/filenest.\n\n\n\n\nInput validation#\n\nThe Filenest core comes with input and output types for all data fetching\nmethods - even zod schemas. You can validate the input data in your endpoints\nlike this:\n\n\n\nYou do not need to add input validation, unless you plan to expose your API to\nthe public or access it in other ways than via the Filenest frontend components.","routePath":"/filenest/docs/backend/adapters/custom-integration","lang":"","toc":[{"text":"Setup","id":"setup","depth":2,"charIndex":133},{"text":"Frontend configuration","id":"frontend-configuration","depth":3,"charIndex":820},{"text":"Input validation","id":"input-validation","depth":2,"charIndex":1106}],"domain":"","frontmatter":{"title":"Custom Integration"},"version":""},{"id":1,"title":"Next.js","content":"#\n\nHow to set up API routes for Filenest in a Next.js app.\n\n\nSetup#\n\n\n1. Install dependencies#\n\n\n2. Create a route handler#\n\nThe Next.js adapter only works with route handlers inside the app directory.\n\nCreate the following file structure:\n\n\n\nYour folder structure may differ depending on your project setup. Just make sure\nthere is a main folder for Filenest routes (e.g. media) and a catch-all route\n(e.g. [action]).\n\nThen just initialize the adapter inside the route.ts file and pass it a\nprovider.\n\n\n\nNow you're all set to build your UI. Check out the minimal setup to get started.","routePath":"/filenest/docs/backend/adapters/nextjs-route-handlers","lang":"","toc":[{"text":"Setup","id":"setup","depth":2,"charIndex":60},{"text":"1. Install dependencies","id":"1-install-dependencies","depth":3,"charIndex":69},{"text":"2. Create a route handler","id":"2-create-a-route-handler","depth":3,"charIndex":96}],"domain":"","frontmatter":{"title":"Next.js"},"version":""},{"id":2,"title":"tRPC","content":"#\n\nHow to set up API routes for Filenest in a tRPC router.\n\n\nSetup#\n\n\n1. Install dependencies#\n\n\n2. Create a router#\n\nJust initialize the adapter and add it to your base tRPC router.\n\n\n\nNeeds improvement\n\nCurrently, the Filenest tRPC router is not very type-safe.\n\nAlthough not necessary, you might not be able to access the procedures using\n@trpc/react-query or the vanilla client, if you tried to.\n\nNow you're all set to build your UI. Check out the minimal setup to get started.\n\n\nMiddleware#\n\nYou can add middleware to the procedures to handle authorization, logging, etc.\n\nWhen creating the router, you can call the use method before create to add\nmiddleware.\n\nuse takes in two arguments: An array of middlewares that will be applied to all\nprocedures, and an object with arrays of middlewares that will be applied to\nspecific procedures.\n\n\nGlobal middleware#\n\nIn this first example, a single middleware is added to all procedures.\n\n\n\n\nScoped middleware#\n\nBut if you want a middleware to run only on a specific procedure, just pass in a\nsecond argument and define your middleware(s) for that procedure.\n\n\n\n\nChaining middleware#\n\nYou can chain multiple middlewares together by calling use multiple times.\n\n\n\n\nCustom Procedure#\n\nOftentimes you have different procedures depending on the authentication\nrequirements of a procedure. You can pass in an arbitrary procedure to be used\nfor all Filenest tRPC procedures. This can make it easier to apply middleware.\n\n","routePath":"/filenest/docs/backend/adapters/trpc","lang":"","toc":[{"text":"Setup","id":"setup","depth":2,"charIndex":60},{"text":"1. Install dependencies","id":"1-install-dependencies","depth":3,"charIndex":69},{"text":"2. Create a router","id":"2-create-a-router","depth":3,"charIndex":96},{"text":"Middleware","id":"middleware","depth":2,"charIndex":483},{"text":"Global middleware","id":"global-middleware","depth":3,"charIndex":845},{"text":"Scoped middleware","id":"scoped-middleware","depth":3,"charIndex":940},{"text":"Chaining middleware","id":"chaining-middleware","depth":3,"charIndex":1111},{"text":"Custom Procedure","id":"custom-procedure","depth":2,"charIndex":1212}],"domain":"","frontmatter":{"title":"tRPC"},"version":""},{"id":3,"title":"Cloudinary","content":"#\n\nHow to set up Cloudinary as a data source.\n\n\n1. Install dependencies#\n\n\n2. Initialize the provider#\n\nOnly create and use a provider server-side. Never expose your API keys to the\nfrontend.\n\nYou can find your Cloudinary credentials in the Cloudinary Console.\n\n\n\nNext, you'll need to set up an adapter to connect the provider to your API.","routePath":"/filenest/docs/backend/providers/cloudinary","lang":"","toc":[{"text":"1. Install dependencies","id":"1-install-dependencies","depth":2,"charIndex":47},{"text":"2. Initialize the provider","id":"2-initialize-the-provider","depth":2,"charIndex":74}],"domain":"","frontmatter":{"title":"Cloudinary"},"version":""},{"id":4,"title":"Contributing","content":"#\n\nThanks for showing interest in contributing! Contributions of any kind are\nwelcome.\n\nYou can contribute to Filenest by\n\n * Adding or improving features or fixing bugs\n * Improving documentation\n * Reporting bugs\n\n\nDevelopment workflow#\n\nThis project uses pnpm as the package manager. Make sure to install it first.\n\n\nInitial installation#\n\n\n\n\nRunning the project#\n\nYou'll need to open multiple terminals to run the project.\n\nFirst, run the following command in the root dir to start the watcher to build\nall packages on file changes.\n\n\n\nIn another terminal, you can run an example app to test your changes.\n\nIf you want to add a new adapter, please also add an example app to test it.\n\n\n\n\nDocumentation#\n\nTo run the docs development server, run the following command in the root dir.\n\n\n\nYou can build the docs by running:\n\n\n\n\nTesting#\n\nFilenest was initially created without any tests, because it was first designed\nfor personal use. When I decided to turn it into an open-source project, I\nwanted to move quickly and publish it as fast as possible to focus on my main\nproject.\n\nTests will be added incrementally, while the library is in beta.\n\nPlease open an issue or create a discussion if you want to take the initiative\nto add tests.\n\n\nProject overview#\n\nThis project is a monorepo using Turborepo. All packages are located in the\npackages directory.\n\n\n@filenest/core#\n\nThe core package contains the Provider interface which all providers must\nimplement.\n\n\n@filenest/provider-#\n\nEach provider package contains the implementation of the Provider interface for\na specific provider.\n\nIt's important to use as few dependencies as possible and to avoid large SDKs\n(e.g. AWS SDK or Cloudinary SDK).\n\nEach provider package should communicate with the provider's REST API via plain\nfetch.\n\nAdding a new provider#\n\nSome provider methods must return specific error messages, so @filenest/react\ncan respond by showing alert dialogs, for example.\n\n * deleteFolder should return { success: false, message: \"ERR_FOLDER_NOT_EMPTY\"\n   } when trying to delete a non-empty folder.\n * renameAsset should return { success: false, message:\n   \"ERR_DELIVERY_URL_WILL_CHANGE\" } when renaming an asset would change its\n   delivery URL.\n * renameAsset should return { success: false, message:\n   \"ERR_UPDATE_DELIVERY_URL_REQUIRED\" } when renaming an asset would change the\n   display name only, and can optionally change the delivery URL.\n\nAlso, make sure to prefix private methods and properties with an underscore _.\n\nFor implementation details, or as a guide to implement a new provider, check out\nthe Cloudinary provider.\n\nWe might need to change the react package#\n\nUploading files is done by getting a signed URL from the Filenest API and\nuploading files to the provider directly from the client.\n\nThat code is currently tailored to Cloudinary, as that was the first provider,\nbut it should be abstracted to work with any provider.\n\nFor example, Cloudinary needs a file parameter to upload a file. See this line\nof code\n\nOther providers might work differently and need different parameters, so this\nwill need to be refactored.\n\nOne way could be to implement a provider.getProvider() method that returns the\nprovider name as a string.\n\nWith that result, we could switch between different upload implementations.\nThere are probably better ways.\n\n\n@filenest/adapter-#\n\nAn adapter basically wraps a provider and returns its methods in a way to\nconform to a framework's API.\n\nIf you want to add a new adapter, please also add an example app to test it.\n\nGotchas#\n\n * An adapter should only accept POST requests. This is because the React client\n   uses POST requests to send input via the body.\n\nMiddleware#\n\nIf possible, an adapter should accept global or per-route middleware, so that a\nuser can add authorization, logging, etc.\n\nCheck out the tRPC Adapter for an example.\n\n\n@filenest/react#\n\nThis package contains all frontend components.\n\nTalking to the Filenest API is done using a fetchers util, which is made\navailable in the Global Context.","routePath":"/filenest/docs/contributing","lang":"","toc":[{"text":"Development workflow","id":"development-workflow","depth":2,"charIndex":216},{"text":"Initial installation","id":"initial-installation","depth":3,"charIndex":319},{"text":"Running the project","id":"running-the-project","depth":3,"charIndex":345},{"text":"Documentation","id":"documentation","depth":3,"charIndex":691},{"text":"Testing","id":"testing","depth":3,"charIndex":828},{"text":"Project overview","id":"project-overview","depth":2,"charIndex":1242},{"text":"`@filenest/core`","id":"filenestcore","depth":3,"charIndex":-1},{"text":"`@filenest/provider-<provider>`","id":"filenestprovider-provider","depth":3,"charIndex":-1},{"text":"Adding a new provider","id":"adding-a-new-provider","depth":4,"charIndex":1788},{"text":"We might need to change the `react` package","id":"we-might-need-to-change-the-react-package","depth":4,"charIndex":-1},{"text":"`@filenest/adapter-<adapter>`","id":"filenestadapter-adapter","depth":3,"charIndex":-1},{"text":"Gotchas","id":"gotchas","depth":4,"charIndex":3536},{"text":"Middleware","id":"middleware","depth":4,"charIndex":3678},{"text":"`@filenest/react`","id":"filenestreact","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"About Components","content":"#\n\nFilenest provides a collection of components to build your file management UI.\nAll of the logic is pre-defined at component level, leaving just the styling up\nto you - just like Radix UI.\n\nMost components need to be nested in a specific way, or else they won't work\nbecause they depend on context values. You can check out the minimal example to\nget an idea of how to structure your code.\n\nFor more details on component usage, props and relations, check out the\nrespective component documentation page.\n\n * Asset\n * AssetActionTrigger\n * AssetDetails\n * AssetList\n * ClearQueueButton\n * DropIndicator\n * Folder\n * FolderActionTrigger\n * FolderCreateTrigger\n * FolderList\n * LoadMoreButton\n * Navigation\n * Queue\n * NavigationItem\n * ReloadButton\n * RemoveFromQueueButton\n * ResourceName\n * Root\n * SearchBar\n * Toolbar\n * ToolbarDeleteButton\n * UploadButton\n * Uploader","routePath":"/filenest/docs/frontend/about-components","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"AssetActionTrigger","content":"#\n\nThe AssetActionTrigger component can trigger selection, renaming, or deletion of\nan asset.\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"button\">, meaning it\naccepts all native button element props.\n\n\naction#\n\nDefine the action the button should trigger.\n\n\"remove\" triggers a confirmation modal to delete the asset.\n\n\"rename\" displays an input to change the asset name. See ResourceName for more\ninfo.\n\n\"select\" calls the onAssetSelect function defined as a prop on the Root\ncomponent.\n\nType: \"remove\" | \"rename\" | \"select\"\n\nRequired\n\nMore Information\n\nBecause delete is a reserved keyword in JavaScript, the delete action is named\nremove to avoid conflicts.\n\n\nasChild#\n\nType: boolean\n\n\nUsage#\n\nAssetActionTrigger must be used inside an Asset component.\n\n","routePath":"/filenest/docs/frontend/components/asset-action-trigger","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":95},{"text":"`action`","id":"action","depth":3,"charIndex":-1},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":708}],"domain":"","frontmatter":{},"version":""},{"id":7,"title":"AssetDetails","content":"#\n\nThe AssetDetails component can display advanced details of the last clicked\nasset.\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"div\">, meaning it accepts\nall native div element props.\n\n\nasChild#\n\nType: boolean\n\n\nRender Props#\n\nTo view advanced details of a file, click on an Asset in an AssetList and the\ndetails of that asset will be available as a render prop in the AssetDetails\ncomponent.\n\n\nasset#\n\nType: Asset & { isLoading: boolean, isSelected: boolean }\n\n\nUsage#\n\nAssetDetails must be used inside a Root component.\n\n","routePath":"/filenest/docs/frontend/components/asset-details","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":87},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"Render Props","id":"render-props","depth":2,"charIndex":234},{"text":"`asset`","id":"asset","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":485}],"domain":"","frontmatter":{},"version":""},{"id":8,"title":"AssetList","content":"#\n\nThe AssetList component displays all of the assets (files) from a folder of your\nremote source.\n\nYou can select multiple assets by holding shift or ctrl. Perform actions on\nselected assets using the Toolbar component.\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"div\">, meaning it accepts\nall native div element props.\n\n\nasChild#\n\nType: boolean\n\n\nRender Props#\n\nYou can use render props to access the assets and the lists loading state.\n\n\nassets#\n\nType: Array | undefined\n\n\nisLoading#\n\nTrue, if a fetch request for a specific query runs for the first time.\n\nType: boolean\n\n\nisLoadingMore#\n\nThe AssetList has infinite loading capabilities when used together with the\nLoadMoreButton. This prop indicates if Filenest is currently fetching more\nassets.\n\nType: boolean\n\n\nUsage#\n\nAssetList must be used inside a Root component.\n\n","routePath":"/filenest/docs/frontend/components/asset-list","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":222},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"Render Props","id":"render-props","depth":2,"charIndex":369},{"text":"`assets`","id":"assets","depth":3,"charIndex":-1},{"text":"`isLoading`","id":"isloading","depth":3,"charIndex":-1},{"text":"`isLoadingMore`","id":"isloadingmore","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":788}],"domain":"","frontmatter":{},"version":""},{"id":9,"title":"Asset","content":"#\n\nThe Asset component should wrap a displayed asset (file).\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"div\">, meaning it accepts\nall native div element props.\n\n\nasset#\n\nFor data handling purposes, an asset must be passed in as a prop.\n\nType: Asset & { isLoading: boolean, isSelected: boolean }\n\nRequired\n\n\nasChild#\n\nType: boolean\n\n\nUsage#\n\nAsset must be used inside an AssetList or AssetDetails component, respectively.\n\nImportant to know\n\nUse the ResourceName component to display the asset's name, instead of accessing\n{asset.name} directly. See ResourceName.\n\n","routePath":"/filenest/docs/frontend/components/asset","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":62},{"text":"`asset`","id":"asset","depth":3,"charIndex":-1},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":354}],"domain":"","frontmatter":{},"version":""},{"id":10,"title":"ClearQueueButton","content":"#\n\nThe ClearQueueButton component removes all files from an upload queue.\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"button\">, meaning it\naccepts all native button element props.\n\n\nasChild#\n\nType: boolean\n\n\nUsage#\n\nClearQueueButton must be used inside a Queue component.\n\n","routePath":"/filenest/docs/frontend/components/clear-queue-button","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":75},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":228}],"domain":"","frontmatter":{},"version":""},{"id":11,"title":"DropIndicator","content":"#\n\nThe DropIndicator component will render when dragging files onto an Uploader.\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"div\">, meaning it accepts\nall native div element props.\n\n\nasChild#\n\nType: boolean\n\n\nUsage#\n\nDropIndicator must be used inside an Uploader component.\n\n","routePath":"/filenest/docs/frontend/components/drop-indicator","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":82},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":229}],"domain":"","frontmatter":{},"version":""},{"id":12,"title":"FolderActionTrigger","content":"#\n\nThe FolderActionTrigger component can trigger renaming or deletion of a folder.\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"button\">, meaning it\naccepts all native button element props.\n\n\naction#\n\nType: \"remove\" | \"rename\" | \"navigateTo\"\n\nRequired\n\nMore Information\n\nBecause delete is a reserved keyword in JavaScript, the delete action is named\nremove to avoid conflicts.\n\n\nasChild#\n\nType: boolean\n\n\nUsage#\n\nFolderActionTrigger must be used inside a Folder component.\n\n","routePath":"/filenest/docs/frontend/components/folder-action-trigger","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":84},{"text":"`action`","id":"action","depth":3,"charIndex":-1},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":424}],"domain":"","frontmatter":{},"version":""},{"id":13,"title":"FolderCreateTrigger","content":"#\n\nThe FolderCreateTrigger will append a temporary folder to your list of folders\nin the current path. Inputting a folder name will create a new real folder with\nthat name.\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"button\">, meaning it\naccepts all native button element props.\n\n\nasChild#\n\nType: boolean\n\n\nUsage#\n\nFolderCreateTrigger must be used inside a Root component.\n\n","routePath":"/filenest/docs/frontend/components/folder-create-trigger","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":174},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":327}],"domain":"","frontmatter":{},"version":""},{"id":14,"title":"FolderList","content":"#\n\nThe FolderList component is used to render a list of folders under the current\npath.\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"div\">, meaning it accepts\nall native div element props.\n\n\nasChild#\n\nType: boolean\n\n\nRender Props#\n\nYou can use render props to access all available folders at the current path.\n\n\nfolders#\n\nType: Folder[] | undefined\n\n\nisLoading#\n\nType: boolean\n\n\nUsage#\n\nFolderList must be used inside a Root component.\n\n","routePath":"/filenest/docs/frontend/components/folder-list","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":89},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"Render Props","id":"render-props","depth":2,"charIndex":236},{"text":"`folders`","id":"folders","depth":3,"charIndex":-1},{"text":"`isLoading`","id":"isloading","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":398}],"domain":"","frontmatter":{},"version":""},{"id":15,"title":"Folder","content":"#\n\nThe Folder component is used to render a folder, which on click will navigate a\nlevel deeper.\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"div\">, meaning it accepts\nall native div element props.\n\n\nasChild#\n\nType: boolean\n\n\nfolder#\n\nFor data handling purposes, a folder must be passed in as a prop.\n\nType: Folder\n\nRequired\n\n\nRender Props#\n\nYou can use render props to access folder state.\n\n\nisLoading#\n\nType: boolean\n\n\nisRenaming#\n\nType: boolean\n\n\nUsage#\n\nFolder must be used inside a FolderList component.\n\nImportant to know\n\nUse the ResourceName component to display the folder's name, instead of\naccessing {folder.name} directly. See ResourceName.\n\n","routePath":"/filenest/docs/frontend/components/folder","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":98},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"`folder`","id":"folder","depth":3,"charIndex":-1},{"text":"Render Props","id":"render-props","depth":2,"charIndex":346},{"text":"`isLoading`","id":"isloading","depth":3,"charIndex":-1},{"text":"`isRenaming`","id":"isrenaming","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":469}],"domain":"","frontmatter":{},"version":""},{"id":16,"title":"LoadMoreButton","content":"#\n\nThe LoadMoreButton component fetches more assets in an infinite loading style.\nThe component is only rendered when there are more assets to fetch.\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"button\">, meaning it\naccepts all native button element props.\n\n\nasChild#\n\nType: boolean\n\n\nUsage#\n\nLoadMoreButton must be used inside a Root component.\n\n","routePath":"/filenest/docs/frontend/components/load-more-button","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":151},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":304}],"domain":"","frontmatter":{},"version":""},{"id":17,"title":"NavigationItem","content":"#\n\nThe NavigationItem component handles navigating through the folder structure.\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"div\">, meaning it accepts\nall native div element props.\n\n\nasChild#\n\nType: boolean\n\n\nfolder#\n\nType: Folder\n\nRequired\n\n\nUsage#\n\nNavigationItem must be used inside a Navigation component.\n\n","routePath":"/filenest/docs/frontend/components/navigation-item","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":82},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"`folder`","id":"folder","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":263}],"domain":"","frontmatter":{},"version":""},{"id":18,"title":"Navigation","content":"#\n\nThe Navigation component is responsible for rendering folder navigation levels,\nmaking it easy to navigate through the folder structure.\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"div\">, meaning it accepts\nall native div element props.\n\n\nasChild#\n\nType: boolean\n\n\nRender Props#\n\nYou can use render props to access the navigation levels.\n\n\nnavigation#\n\nType: Folder[]\n\n\nUsage#\n\nNavigation must be used inside a Root component.\n\n","routePath":"/filenest/docs/frontend/components/navigation","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":141},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"Render Props","id":"render-props","depth":2,"charIndex":288},{"text":"`navigation`","id":"navigation","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":393}],"domain":"","frontmatter":{},"version":""},{"id":19,"title":"Queue","content":"#\n\nThe Queue component renders a list of upload-ready files. It must reference an\nUploader component to find files to display.\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"div\">, meaning it accepts\nall native div element props.\n\n\nasChild#\n\nType: boolean\n\n\nreferences#\n\nThe name of an Uploader component this queue references.\n\nType: string\n\nRequired\n\n\nRender Props#\n\n\nclearQueue#\n\nIt is recommended to use the ClearQueueButton component instead.\n\nType: () => void\n\n\nfiles#\n\nType: QueueFile[]\n\n\nisUploading#\n\nType: boolean\n\n\nprogress#\n\nTotal upload progress of all files in the queue in percent.\n\nType: number\n\n\nUsage#\n\nQueue must be used inside a Root component.\n\n\n\n\nQueueFile#\n\nWhen mapping over the files array in a Queue, you can access each file's loading\nstate and progress.\n\n","routePath":"/filenest/docs/frontend/components/queue","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":128},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"`references`","id":"references","depth":3,"charIndex":-1},{"text":"Render Props","id":"render-props","depth":2,"charIndex":371},{"text":"`clearQueue`","id":"clearqueue","depth":3,"charIndex":-1},{"text":"`files`","id":"files","depth":3,"charIndex":-1},{"text":"`isUploading`","id":"isuploading","depth":3,"charIndex":-1},{"text":"`progress`","id":"progress","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":630},{"text":"QueueFile","id":"queuefile","depth":3,"charIndex":686}],"domain":"","frontmatter":{},"version":""},{"id":20,"title":"ReloadButton","content":"#\n\nThe ReloadButton component re-fetches the assets in the current folder.\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"button\">, meaning it\naccepts all native button element props.\n\n\nasChild#\n\nType: boolean\n\n\nRender Props#\n\nYou can use render props to access button state.\n\n\nisLoading#\n\nType: boolean\n\n\nUsage#\n\nReloadButton must be used inside a Root component.\n\n","routePath":"/filenest/docs/frontend/components/reload-button","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":76},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"Render Props","id":"render-props","depth":2,"charIndex":229},{"text":"`isLoading`","id":"isloading","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":323}],"domain":"","frontmatter":{},"version":""},{"id":21,"title":"RemoveFromQueueButton","content":"#\n\nThe RemoveFromQueueButton component can remove a file from the upload queue.\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"button\">, meaning it\naccepts all native button element props.\n\n\nasChild#\n\nType: boolean\n\n\nfile#\n\nType: QueueFile\n\nRequired\n\n\nUsage#\n\nRemoveFromQueueButton must be used inside a Queue component.\n\n","routePath":"/filenest/docs/frontend/components/remove-from-queue-button","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":81},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"`file`","id":"file","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":269}],"domain":"","frontmatter":{},"version":""},{"id":22,"title":"ResourceName","content":"#\n\nThe ResourceName component should be used to display the name of any folder or\nasset. While a folder or asset is being renamed, this component displays an\ninput field to edit the name.\n\n\nProps#\n\nThis component extends React.HTMLAttributes, meaning it accepts all standard\nHTML element props.\n\n\nUsage#\n\nResourceName must be used inside either an Asset or Folder component.\n\nIt is recommended to not exaggerate use of CSS styles on this component.\nRemember, that the component returns either a div or an input element, depending\non the parent resources isRenaming state.\n\n\n\nYou can use ResourceName in combination with an action trigger to trigger\nrenaming by clicking the resource name.\n\n","routePath":"/filenest/docs/frontend/components/resource-name","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":189},{"text":"Usage","id":"usage","depth":2,"charIndex":296}],"domain":"","frontmatter":{},"version":""},{"id":23,"title":"Root","content":"#\n\nThe Root component must wrap all other Filenest components.\n\n\nProps#\n\n\nchildren#\n\nType: React.ReactNode\n\nRequired\n\n\nendpoint#\n\nThe main API endpoint Filenest will use to fetch data.\n\nFor example: /api/media or http://localhost:3000/api/media\n\nType: string\n\nRequired\n\n\nendpointIsTRPC#\n\nIf your API uses tRPC, set this to true.\n\nCheck if the endpoint prop is set correctly to use dots if your endpoint is a\nnested procedure, like /trpc/admin.media.\n\nType: boolean\n\n\nlabels#\n\nOverride the default labels used in Filenest components.\n\nFor example, you can override the default alert text strings.\n\nSee labels for a list of all available labels.\n\nType: Record\n\n\nonAssetSelect#\n\nA function that is called when an asset is selected.\n\nCan be used to store the selected asset URL in a form state, for example.\n\nType: (asset: Asset) => void\n\n\nonError#\n\nA function that is called when a fetch error occurs.\n\nCan be used to display toast notifications, for example.\n\nType: (message: string) => void\n\n\nUsage#\n\n","routePath":"/filenest/docs/frontend/components/root","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":64},{"text":"`children`","id":"children","depth":3,"charIndex":-1},{"text":"`endpoint`","id":"endpoint","depth":3,"charIndex":-1},{"text":"`endpointIsTRPC`","id":"endpointistrpc","depth":3,"charIndex":-1},{"text":"`labels`","id":"labels","depth":3,"charIndex":-1},{"text":"`onAssetSelect`","id":"onassetselect","depth":3,"charIndex":-1},{"text":"`onError`","id":"onerror","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":991}],"domain":"","frontmatter":{},"version":""},{"id":24,"title":"SearchBar","content":"#\n\nThe SearchBar component can be used to search for assets globally or in the\ncurrent folder, respectively.\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"input\">, meaning it\naccepts all native input element props.\n\n\nasChild#\n\nType: boolean\n\n\nlocation#\n\nWhere to search for assets.\n\n\"current\" searches in the current folder only.\n\n\"global\" searches globally (recommended).\n\nType: \"current\" | \"global\"\n\n\nUsage#\n\nSearchBar must be used inside a Root component.\n\nTIP\n\nYou can specify either a minLength or min prop, to control when a new fetch\nrequest should be triggered.\n\n","routePath":"/filenest/docs/frontend/components/search-bar","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":110},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"`location`","id":"location","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":421}],"domain":"","frontmatter":{},"version":""},{"id":25,"title":"ToolbarDeleteButton","content":"#\n\nThe ToolbarDeleteButton component can delete multiple selected assets.\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"button\">, meaning it\naccepts all native button element props.\n\n\nasChild#\n\nType: boolean\n\n\nUsage#\n\nToolbarDeleteButton must be used inside a Toolbar component.\n\n","routePath":"/filenest/docs/frontend/components/toolbar-delete-button","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":75},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":228}],"domain":"","frontmatter":{},"version":""},{"id":26,"title":"Toolbar","content":"#\n\nThe Toolbar component is rendered when multiple assets are selected. It acts as\na container for various actions that can be performed on the selected assets.\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"div\">, meaning it accepts\nall native div element props.\n\n\nasChild#\n\nType: boolean\n\n\nRender Props#\n\n\nselectedFilesCount#\n\nType: number\n\n\nUsage#\n\nToolbar must be used inside a Root component.\n\n","routePath":"/filenest/docs/frontend/components/toolbar","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":162},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"Render Props","id":"render-props","depth":2,"charIndex":309},{"text":"`selectedFilesCount`","id":"selectedfilescount","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":361}],"domain":"","frontmatter":{},"version":""},{"id":27,"title":"UploadButton","content":"#\n\nThe UploadButton component can trigger an upload of all files in a queue to a\nremote data source.\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"button\">, meaning it\naccepts all native button element props.\n\n\nasChild#\n\nType: boolean\n\n\nreferences#\n\nThe name of an Uploader component this button references.\n\nType: string\n\nRequired\n\n\nUsage#\n\nUploadButton must be used inside a Root component.\n\n","routePath":"/filenest/docs/frontend/components/upload-button","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":102},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"`references`","id":"references","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":352}],"domain":"","frontmatter":{},"version":""},{"id":28,"title":"Uploader","content":"#\n\nThe Uploader component handles file selection. It uses react-dropzone under the\nhood. It must reference an Uploader component to find files to upload.\n\n\nProps#\n\nThis component extends React.ComponentPropsWithoutRef<\"div\">, meaning it accepts\nall native div element props.\n\n\naccept#\n\nFor example: {\"image/*\": [\".png\", \".gif\", \".jpeg\", \".jpg\"]}\n\nType: {[key: string]: string[]}\n\n\nasChild#\n\nType: boolean\n\n\ndisabled#\n\nType: boolean\n\n\nhideIfMaxFilesReached#\n\nHides the uploader if the maximum number of files has been reached.\n\nAlso hides it, if a single file is selected and multiple is set to false.\n\nType: boolean\n\n\nname#\n\nA unique name for this uploader. Allows other components like Queue and\nUploadButton to reference this uploader.\n\nType: string\n\nRequired\n\n\nnoDrop#\n\nPrevents the user from dropping files into the uploader.\n\nType: boolean\n\n\nnoClick#\n\nPrevents the user from clicking the uploader to select files.\n\nType: boolean\n\n\nmaxFiles#\n\nType: number\n\n\nmaxSize#\n\nType: number\n\nDefault: 2.5e8 (250 MB)\n\n\nmultiple#\n\nAllows selection of multiple files.\n\nType: boolean\n\nDefault: true\n\n\nonProgress#\n\nA function to be called whenever a file's upload progress changes.\n\nType: (progress: number) => void\n\n\nonUpload#\n\nA function to be called whenever a file from the queue is uploaded.\n\nYou can access the raw response data from the provider upload endpoint.\n\nType: (file: unknown) => void\n\n\nonSuccess#\n\nA function to be called when all files of the queue are uploaded successfully.\n\nComes with an array of all uploaded files (raw response data from provider\nupload endpoint).\n\nType: (files: unknown[]) => void\n\n\nonError#\n\nA function to be called when an error occurs during file upload.\n\nType: (message: string) => void\n\n\nRender Props#\n\n\nisDragActive#\n\nIt is recommended to use the DropIndicator component to conditionally render\nelements based on drag status.\n\nType: boolean\n\n\nUsage#\n\nUploader must be used inside a Root component.\n\n","routePath":"/filenest/docs/frontend/components/uploader","lang":"","toc":[{"text":"Props","id":"props","depth":2,"charIndex":155},{"text":"`accept`","id":"accept","depth":3,"charIndex":-1},{"text":"`asChild`","id":"aschild","depth":3,"charIndex":-1},{"text":"`disabled`","id":"disabled","depth":3,"charIndex":-1},{"text":"`hideIfMaxFilesReached`","id":"hideifmaxfilesreached","depth":3,"charIndex":-1},{"text":"`name`","id":"name","depth":3,"charIndex":-1},{"text":"`noDrop`","id":"nodrop","depth":3,"charIndex":-1},{"text":"`noClick`","id":"noclick","depth":3,"charIndex":-1},{"text":"`maxFiles`","id":"maxfiles","depth":3,"charIndex":-1},{"text":"`maxSize`","id":"maxsize","depth":3,"charIndex":-1},{"text":"`multiple`","id":"multiple","depth":3,"charIndex":-1},{"text":"`onProgress`","id":"onprogress","depth":3,"charIndex":-1},{"text":"`onUpload`","id":"onupload","depth":3,"charIndex":-1},{"text":"`onSuccess`","id":"onsuccess","depth":3,"charIndex":-1},{"text":"`onError`","id":"onerror","depth":3,"charIndex":-1},{"text":"Render Props","id":"render-props","depth":2,"charIndex":1722},{"text":"`isDragActive`","id":"isdragactive","depth":3,"charIndex":-1},{"text":"Usage","id":"usage","depth":2,"charIndex":1878}],"domain":"","frontmatter":{},"version":""},{"id":29,"title":"Labels","content":"#\n\nFilenest uses some hardcoded text strings that are displayed in the UI. For\nexample alert messages.\n\n\nDefault labels#\n\nLABEL                              DEFAULT VALUE\nalert.folderNestedContent.title    Are you sure you want to delete this folder?\nalert.folderNestedContent.text     This folder is not empty. All nested assets and folders will\n                                   be permanently deleted.\nalert.folderNestedContent.cancel   Cancel\nalert.folderNestedContent.commit   Delete folder and all contents\nalert.deliveryUrlChange.title      Confirm your changes\nalert.deliveryUrlChange.text       Changing the name of your file will result in a new delivery\n                                   URL. All existing URLs to this file will break.\nalert.deliveryUrlChange.cancel     Cancel\nalert.deliveryUrlChange.commit     Rename file\nalert.deliveryUrlRequired.title    Update URL aswell?\nalert.deliveryUrlRequired.text     You are about to change the display name of this file. The\n                                   URL of this file will not change. Do you want to update the\n                                   URL aswell? Warning: All existing URLs to this file will\n                                   break.\nalert.deliveryUrlRequired.cancel   Change display name only\nalert.deliveryUrlRequired.commit   Change name and URL\n\n\nOverriding default labels#\n\nYou can override the default labels by providing a custom labels prop to the\nRoot component.\n\n","routePath":"/filenest/docs/frontend/labels","lang":"","toc":[{"text":"Default labels","id":"default-labels","depth":3,"charIndex":104},{"text":"Overriding default labels","id":"overriding-default-labels","depth":3,"charIndex":1331}],"domain":"","frontmatter":{},"version":""},{"id":30,"title":"Minimal Setup","content":"#\n\nMake sure you first install the necessary dependencies:\n\nThe following code will scaffold a minimal, unstyled file manager component.\nLoading states are not considered in this example. It only should give you an\nidea of how to structure the components.\n\nIf you're looking for a more detailed example, check out the full example.\n\n","routePath":"/filenest/docs/frontend/minimal-setup","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":31,"title":"Introduction","content":"#\n\n\nWhat is Filenest and who is it for#\n\nFilenest is a TypeScript library designed to seamlessly integrate a file manager\ninto your app or admin dashboard. This library is ideal for developers who:\n\n * Need to connect a file hosting provider to their app\n * Require a way to select images for database entities (e.g., articles)\n * Want to manage externally hosted files directly within their site\n\n\nBackground#\n\n\ntl;dr (sort of)#\n\nDevelopers often choose to build their own admin dashboards instead of using a\nCMS for various reasons. Even when creating a simple blog backend, you may need\nto view, select, or manage images and other files — like selecting a header\nimage for a blog article.\n\nWhile it's possible to use a simple text field to paste an image link, having a\nfully-featured media gallery, like those found in content management systems,\noffers a better user experience. However, implementing such functionality can be\ntedious and time-consuming.\n\nFilenest significantly reduces the effort required to build these features. By\nusing providers and adapters for your backend and frontend components for your\nUI, you can easily integrate Filenest’s asset management capabilities into your\nexisting project. This approach allows you to maintain full control over backend\npermissions and frontend styles.\n\n\nThe story behind it#\n\nA personal project of mine (@nordowl), with a custom backend, required a way to\nconnect images to database entities. Let's just say they were blog articles. I\nneeded some way to upload and manage images and be able to choose an image for\neach article. Cloudinary turned out to be my file hoster of choice because of\nits generous free tier, SDK and web interface (#NotSponsored). A text field\nholding an image link would be the simplest to implement and would suffice for\nmy articles - but did I really want to open up Cloudinary everytime I wanted to\ncopy an image URL? Nope.\n\nAnd so I built some API routes to get my data from Cloudinary, and built a\nbeautiful custom file management component in React - tailored to my needs\nspecifically. Everything worked well. I could fetch and display my remote images\nin my app and get all the file URLs. Some time passed and another project arose,\nwhich turned out to need a media library as well.\n\n\"Do I just copy everything over?\"\n\nYup. I copied all the API routes but redid and improved the React components.\nBeing halfway done I was wondering, what if I needed another file manager in the\nfuture? I couldn't be copying dozens of files everytime. I searched the web for\na library that fulfills my use case, but couldn't find one. And I thought I was\nprobably not the only developer building custom dashboards that need an image /\nfile manager.\n\n\"Might aswell turn this into a library.\"\n\nAnd this is why Filenest exist. It extends your existing API by adding a few\nendpoints, which the frontend components use to talk to your third party file\nhosting provider. Minimal backend setup required - and the components come\nunstyled, meaning you can style them to your needs, matching the rest of your\nUI.\n\n\nTry out Filenest now#\n\nCheck out the quick start quide.","routePath":"/filenest/docs/getting-started/introduction","lang":"","toc":[{"text":"What is Filenest and who is it for","id":"what-is-filenest-and-who-is-it-for","depth":2,"charIndex":3},{"text":"Background","id":"background","depth":2,"charIndex":398},{"text":"tl;dr (sort of)","id":"tldr-sort-of","depth":3,"charIndex":412},{"text":"The story behind it","id":"the-story-behind-it","depth":3,"charIndex":1314},{"text":"Try out Filenest now","id":"try-out-filenest-now","depth":2,"charIndex":3081}],"domain":"","frontmatter":{},"version":""},{"id":32,"title":"Quick Start","content":"#\n\nHeads-Up\n\nFilenest is currently in its early development stage.The API may change without\nwarning until the first major release.\n\nThe list of supported frameworks will expand in the future. If your preferred\nprovider or adapter is not available, consider contributing to Filenest.\n\n\n1. Set up a Provider#\n\nA provider is responsible for making requests to a third-party service to\nretrieve your data and handle asset management. Find your provider in the list\nbelow and learn how to set it up in your backend:\n\n * Cloudinary\n\n\n2. Configure an Adapter#\n\nAn adapter creates API routes for your backend. You can use an adapter if your\nbackend framework is supported, or manually integrate the required API routes if\nyour framework is not supported. This may require a bit more effort.\n\n * Next.js Route Handlers\n * tRPC\n * Manual Integration\n\n\n3. Build your UI using Components#\n\nBuild your asset management UI using React components. Similar to Radix UI, all\nthe logic is pre-defined at the component level, allowing you to focus solely on\nstyling. Check out how to build your file manager using Filenest components.\n\nYou can learn more about individual components here.","routePath":"/filenest/docs/getting-started/quick-start","lang":"","toc":[{"text":"1. Set up a Provider","id":"1-set-up-a-provider","depth":2,"charIndex":285},{"text":"2. Configure an Adapter","id":"2-configure-an-adapter","depth":2,"charIndex":528},{"text":"3. Build your UI using Components","id":"3-build-your-ui-using-components","depth":2,"charIndex":842}],"domain":"","frontmatter":{},"version":""},{"id":33,"title":"What's Next","content":"#\n\n\nCurrent State of Filenest#\n\nAs is currently stands, Filenest only includes limited providers and adapters.\nThis is because Filenest was initially designed for my (@nordowl) specific\npersonal use case, which is to manage Cloudinary assets in a Next.js\napplication, as written in the introduction. However, I want to make sure\nFilenest can be used by a wider range of developers, which is why I already have\na few features in mind I'd like to implement at some point.\n\n\nPlanned Features#\n\nWith help from the community, the following features will possibly be\nimplemented into Filenest.\n\nContributing\n\nIf you would like to support the project by contributing, you can read\neverything about it here. If you'd like to see a feature not listed here, please\ncreate a new issue and let's talk about it.\n\n\nProviders#\n\n * AWS provider\n\n\nAdapters#\n\n * Express adapter\n * Hono adapter","routePath":"/filenest/docs/whats-next","lang":"","toc":[{"text":"Current State of Filenest","id":"current-state-of-filenest","depth":2,"charIndex":3},{"text":"Planned Features","id":"planned-features","depth":2,"charIndex":471},{"text":"Providers","id":"providers","depth":3,"charIndex":800},{"text":"Adapters","id":"adapters","depth":3,"charIndex":830}],"domain":"","frontmatter":{},"version":""}]